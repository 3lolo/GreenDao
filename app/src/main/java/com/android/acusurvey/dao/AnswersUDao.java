package com.android.acusurvey.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.acusurvey.dao.AnswersU;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANSWERS_U".
*/
public class AnswersUDao extends AbstractDao<AnswersU, Long> {

    public static final String TABLENAME = "ANSWERS_U";

    /**
     * Properties of entity AnswersU.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Qid = new Property(1, Integer.class, "qid", false, "QID");
        public final static Property Sid = new Property(2, Integer.class, "sid", false, "SID");
        public final static Property Gid = new Property(3, Integer.class, "gid", false, "GID");
        public final static Property U_sid = new Property(4, Integer.class, "u_sid", false, "U_SID");
        public final static Property Answer = new Property(5, String.class, "answer", false, "ANSWER");
        public final static Property Code = new Property(6, String.class, "code", false, "CODE");
    };


    public AnswersUDao(DaoConfig config) {
        super(config);
    }
    
    public AnswersUDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANSWERS_U\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"QID\" INTEGER," + // 1: qid
                "\"SID\" INTEGER," + // 2: sid
                "\"GID\" INTEGER," + // 3: gid
                "\"U_SID\" INTEGER," + // 4: u_sid
                "\"ANSWER\" TEXT," + // 5: answer
                "\"CODE\" TEXT);"); // 6: code
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANSWERS_U\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AnswersU entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer qid = entity.getQid();
        if (qid != null) {
            stmt.bindLong(2, qid);
        }
 
        Integer sid = entity.getSid();
        if (sid != null) {
            stmt.bindLong(3, sid);
        }
 
        Integer gid = entity.getGid();
        if (gid != null) {
            stmt.bindLong(4, gid);
        }
 
        Integer u_sid = entity.getU_sid();
        if (u_sid != null) {
            stmt.bindLong(5, u_sid);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(6, answer);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(7, code);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AnswersU readEntity(Cursor cursor, int offset) {
        AnswersU entity = new AnswersU( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // qid
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // sid
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // gid
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // u_sid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // answer
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // code
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AnswersU entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSid(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setGid(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setU_sid(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAnswer(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AnswersU entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AnswersU entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
