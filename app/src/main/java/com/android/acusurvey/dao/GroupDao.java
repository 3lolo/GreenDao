package com.android.acusurvey.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.acusurvey.dao.Group;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP".
*/
public class GroupDao extends AbstractDao<Group, Long> {

    public static final String TABLENAME = "GROUP";

    /**
     * Properties of entity Group.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sid = new Property(1, Integer.class, "sid", false, "SID");
        public final static Property Group_name = new Property(2, String.class, "group_name", false, "GROUP_NAME");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Language = new Property(4, String.class, "language", false, "LANGUAGE");
        public final static Property Group_order = new Property(5, Integer.class, "group_order", false, "GROUP_ORDER");
        public final static Property Randomization_group = new Property(6, String.class, "randomization_group", false, "RANDOMIZATION_GROUP");
        public final static Property Grelevance = new Property(7, String.class, "grelevance", false, "GRELEVANCE");
    };


    public GroupDao(DaoConfig config) {
        super(config);
    }
    
    public GroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SID\" INTEGER," + // 1: sid
                "\"GROUP_NAME\" TEXT," + // 2: group_name
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"LANGUAGE\" TEXT," + // 4: language
                "\"GROUP_ORDER\" INTEGER," + // 5: group_order
                "\"RANDOMIZATION_GROUP\" TEXT," + // 6: randomization_group
                "\"GRELEVANCE\" TEXT);"); // 7: grelevance
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Group entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer sid = entity.getSid();
        if (sid != null) {
            stmt.bindLong(2, sid);
        }
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(3, group_name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(5, language);
        }
 
        Integer group_order = entity.getGroup_order();
        if (group_order != null) {
            stmt.bindLong(6, group_order);
        }
 
        String randomization_group = entity.getRandomization_group();
        if (randomization_group != null) {
            stmt.bindString(7, randomization_group);
        }
 
        String grelevance = entity.getGrelevance();
        if (grelevance != null) {
            stmt.bindString(8, grelevance);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Group readEntity(Cursor cursor, int offset) {
        Group entity = new Group( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // sid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // group_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // language
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // group_order
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // randomization_group
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // grelevance
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Group entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setGroup_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLanguage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGroup_order(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setRandomization_group(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGrelevance(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Group entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Group entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
