package com.android.acusurvey.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.acusurvey.dao.Answers;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANSWERS".
*/
public class AnswersDao extends AbstractDao<Answers, Long> {

    public static final String TABLENAME = "ANSWERS";

    /**
     * Properties of entity Answers.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Qid = new Property(1, Integer.class, "qid", false, "QID");
        public final static Property Answer = new Property(2, String.class, "answer", false, "ANSWER");
        public final static Property Assessment_value = new Property(3, Integer.class, "assessment_value", false, "ASSESSMENT_VALUE");
        public final static Property Scale_id = new Property(4, Integer.class, "scale_id", false, "SCALE_ID");
        public final static Property Code = new Property(5, String.class, "code", false, "CODE");
    };


    public AnswersDao(DaoConfig config) {
        super(config);
    }
    
    public AnswersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANSWERS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"QID\" INTEGER," + // 1: qid
                "\"ANSWER\" TEXT," + // 2: answer
                "\"ASSESSMENT_VALUE\" INTEGER," + // 3: assessment_value
                "\"SCALE_ID\" INTEGER," + // 4: scale_id
                "\"CODE\" TEXT);"); // 5: code
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANSWERS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Answers entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer qid = entity.getQid();
        if (qid != null) {
            stmt.bindLong(2, qid);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(3, answer);
        }
 
        Integer assessment_value = entity.getAssessment_value();
        if (assessment_value != null) {
            stmt.bindLong(4, assessment_value);
        }
 
        Integer scale_id = entity.getScale_id();
        if (scale_id != null) {
            stmt.bindLong(5, scale_id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(6, code);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Answers readEntity(Cursor cursor, int offset) {
        Answers entity = new Answers( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // qid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // answer
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // assessment_value
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // scale_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // code
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Answers entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAnswer(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAssessment_value(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setScale_id(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Answers entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Answers entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
