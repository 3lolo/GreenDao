package com.android.acusurvey.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.acusurvey.dao.AnswersP;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANSWERS_P".
*/
public class AnswersPDao extends AbstractDao<AnswersP, Void> {

    public static final String TABLENAME = "ANSWERS_P";

    /**
     * Properties of entity AnswersP.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Available_answers = new Property(0, String.class, "available_answers", false, "AVAILABLE_ANSWERS");
        public final static Property Subquestions = new Property(1, String.class, "subquestions", false, "SUBQUESTIONS");
        public final static Property Attributes = new Property(2, String.class, "attributes", false, "ATTRIBUTES");
        public final static Property Attributes_lang = new Property(3, String.class, "attributes_lang", false, "ATTRIBUTES_LANG");
    };


    public AnswersPDao(DaoConfig config) {
        super(config);
    }
    
    public AnswersPDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANSWERS_P\" (" + //
                "\"AVAILABLE_ANSWERS\" TEXT," + // 0: available_answers
                "\"SUBQUESTIONS\" TEXT," + // 1: subquestions
                "\"ATTRIBUTES\" TEXT," + // 2: attributes
                "\"ATTRIBUTES_LANG\" TEXT);"); // 3: attributes_lang
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANSWERS_P\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AnswersP entity) {
        stmt.clearBindings();
 
        String available_answers = entity.getAvailable_answers();
        if (available_answers != null) {
            stmt.bindString(1, available_answers);
        }
 
        String subquestions = entity.getSubquestions();
        if (subquestions != null) {
            stmt.bindString(2, subquestions);
        }
 
        String attributes = entity.getAttributes();
        if (attributes != null) {
            stmt.bindString(3, attributes);
        }
 
        String attributes_lang = entity.getAttributes_lang();
        if (attributes_lang != null) {
            stmt.bindString(4, attributes_lang);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public AnswersP readEntity(Cursor cursor, int offset) {
        AnswersP entity = new AnswersP( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // available_answers
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // subquestions
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // attributes
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // attributes_lang
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AnswersP entity, int offset) {
        entity.setAvailable_answers(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSubquestions(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAttributes(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAttributes_lang(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(AnswersP entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(AnswersP entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
